# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import svm_pb2 as svm__pb2


class SVMTrainingServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.train = channel.unary_unary(
                '/SVMTrainingServer/train',
                request_serializer=svm__pb2.TrainRequest.SerializeToString,
                response_deserializer=svm__pb2.TrainResponse.FromString,
                )


class SVMTrainingServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def train(self, request, context):
        """训练
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SVMTrainingServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'train': grpc.unary_unary_rpc_method_handler(
                    servicer.train,
                    request_deserializer=svm__pb2.TrainRequest.FromString,
                    response_serializer=svm__pb2.TrainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SVMTrainingServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SVMTrainingServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SVMTrainingServer/train',
            svm__pb2.TrainRequest.SerializeToString,
            svm__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SVMDetectionServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.detect = channel.unary_unary(
                '/SVMDetectionServer/detect',
                request_serializer=svm__pb2.DetectRequest.SerializeToString,
                response_deserializer=svm__pb2.DetectResponse.FromString,
                )


class SVMDetectionServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def detect(self, request, context):
        """瑕疵检测
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SVMDetectionServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'detect': grpc.unary_unary_rpc_method_handler(
                    servicer.detect,
                    request_deserializer=svm__pb2.DetectRequest.FromString,
                    response_serializer=svm__pb2.DetectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SVMDetectionServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SVMDetectionServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def detect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SVMDetectionServer/detect',
            svm__pb2.DetectRequest.SerializeToString,
            svm__pb2.DetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
